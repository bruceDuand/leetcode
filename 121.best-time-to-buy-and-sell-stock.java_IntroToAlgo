import java.util.ArrayList;
import java.util.List;

import javax.lang.model.util.ElementScanner6;

import jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator;

/*
 * @lc app=leetcode id=121 lang=java
 *
 * [121] Best Time to Buy and Sell Stock
 */

// @lc code=start
class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0 || prices.length == 1)
            return 0;

        int[] diff_prices = new int[prices.length - 1];
        for (int i = 1; i < prices.length; i++)
            diff_prices[i - 1] = prices[i] - prices[i - 1];

        List<Integer> res = findMaximumSubarray(diff_prices, 0, diff_prices.length - 1);
        if (res.get(2) > 0)
            return res.get(2);
        else
            return 0;
    }

    private List<Integer> findCrossMaximumSubarray(int[] A, int low, int mid, int high) {
        int maxleft_sum = Integer.MIN_VALUE;
        int sum = 0;
        int maxleft_ind = 0;
        for (int i = mid; i >= low; i--) {
            sum = sum + A[i];
            if (sum >= maxleft_sum) {
                maxleft_sum = sum;
                maxleft_ind = i;
            }
        }

        int maxright_sum = Integer.MIN_VALUE;
        int maxright_ind = 0;
        sum = 0;
        for (int i = mid + 1; i <= high; i++) {
            sum = sum + A[i];
            if (sum > maxright_sum) {
                maxright_sum = sum;
                maxright_ind = i;
            }
        }

        List<Integer> res = new ArrayList<Integer>();
        res.add(maxleft_ind);
        res.add(maxright_ind);
        res.add(maxleft_sum + maxright_sum);
        return res;
    }

    private List<Integer> findMaximumSubarray(int[] A, int low, int high) {
        List<Integer> res = new ArrayList<Integer>();
        if (high == low) {
            res.add(low);
            res.add(high);
            res.add(A[high]);
            return res;
        } else {
            int mid = (high + low) / 2;
            List<Integer> leftsub = findMaximumSubarray(A, low, mid);
            List<Integer> crossub = findCrossMaximumSubarray(A, low, mid, high);
            List<Integer> rightsub = findMaximumSubarray(A, mid + 1, high);

            int max_left = leftsub.get(2);
            int max_right = rightsub.get(2);
            int max_cross = crossub.get(2);
            if (max_left >= max_right && max_left >= max_cross)
                return leftsub;
            else if (max_right >= max_left && max_right >= max_cross)
                return rightsub;
            else
                return crossub;
        }
    }
}
// @lc code=end
